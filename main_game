"""
Created on Tue Apr  2 13:06:11 2019

@author: jshands

The main file for executing the game. This file will run on an inifinite 
loop until the game needs to close. We can intiate the game using a while 
loop 


"""

import pygame

pygame.init()

# This is the game display window
gameDisplay = pygame.display.set_mode((800,600))


# This is another variables just set to width of the screen, so we don't need
# to change the width
screenWidth = 600

# This is the game display name
pygame.display.set_caption("GAME NAME")

# This has not been implemented yet 
clock = pygame.time.Clock() 

# This is to run the infinite loop of the game
# If game_on = False, the game quits 
game_on = True

# These variables are used for the character
# X and Y are used as the position to start the char. At some point, 
# I will add in code to begin the character in the bottom-left 
x = 50 
y = 50
width = 30
height = 60 
velocity = 5

# Variables for jumping 
# If K_SPACE is pressed, jump changes to true and jumpHeight executes
jump = False 
jumpHeight = 10

while game_on: 
    
    # The time delay is by milliseconds
    pygame.time.delay(50) 
    
    for event in pygame.event.get(): 
        # If you hit the big red button in the corner, the game quits
        if event.type == pygame.QUIT: 
            game_on = False
        
        # Initializing the keys 
    keys = pygame.key.get_pressed() 
        
    if keys[pygame.K_LEFT] and x > velocity: 
        x -= velocity
    if keys[pygame.K_RIGHT] and x < screenWidth - width - velocity: 
        x += velocity
    
    # If jump is False, you can move up and down     
    if not (jump):  
        if keys[pygame.K_UP] and y > velocity: 
            y -= velocity
        if keys[pygame.K_DOWN] and y < screenWidth - height - velocity: 
            y += velocity
        if keys[pygame.K_SPACE]: 
            jump = True
    else:
        if jumpHeight >= -10:
            # Moves up
            up_down = 1
            if jumpHeight < 0:
                # Moves down
                up_down = -1
            y -= (jumpHeight**2) * 0.5 * up_down
            jumpHeight -= 1
        else: 
            jump = False
            jumpHeight = 10
            
        # This is to ensure we fill the screen with black before our rectangle
        # gets intiated 
    gameDisplay.fill((0, 0, 0))    
        # Every object in pygame is a surface so the first variable needs to 
        # the surface we intiated in the beginning
        # Using rect because we have the x, y, width and height defined 
        #                surface, (RGB values),    (x, y, width, height)
    pygame.draw.rect(gameDisplay, (0, 255, 0), (x, y, width, height))
        # Need to update display otherwise, the character won't show up
    pygame.display.update() 
        
    
    # Possible future use for displaying FPS    
    # pygame.display.update() 
    # clock.tick(60)

# Closes the game    
pygame.quit()
quit() 
    
    

'''

# This is extra code that we may use. I need to figure out how to put
# this into the main code, but for now it's fine in the comments 

while True: 
    
    # Checks for the name
    try:
        name = str(input("Input a name: "))
        break
    except: 
        print("This is an error message.")
    
while True:
    
    try:
        # Checks for the job of the character
        job = str(input("Which class would you like to be?", "\n", 
                        "Wizard?", "Warrior", "Rogue", "\n"))
        break
    except: 
        print("Try that again. Second loop")

'''

'''
if job == 'wizard' | job == 'w':
    job = 'wizard' 
elif job == 'warrior' | job == 'war': 
    job = 'warrior' 
else: 
    job = 'rogue'
'''

'''
player = Character(name, job) 

'''


# if __name__ == __main__: 
# 
